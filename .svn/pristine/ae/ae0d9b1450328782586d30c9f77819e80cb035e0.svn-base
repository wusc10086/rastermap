/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.rasterdb.service.device;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.CellReference;
import org.apache.poi.poifs.filesystem.NPOIFSFileSystem;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.Row;
import org.nutz.dao.Cnd;
import org.nutz.dao.Dao;
import org.nutz.dao.Sqls;
import org.nutz.dao.sql.Sql;
import org.nutz.dao.sql.SqlCallback;
import org.nutz.ioc.loader.annotation.Inject;
import org.nutz.ioc.loader.annotation.IocBean;
import org.rasterdb.domain.EFDevice;
import org.rasterdb.utils.Errors;
import org.rasterdb.utils.HYPager;
import org.rasterdb.utils.ProjectInfo;

/**
 *
 * @author wuyiwei
 */
@IocBean( name = "deviceManagerService")
public class DeviceManagerService {
    
    static final Logger LOG = LogManager.getLogger(DeviceManagerService.class);
    
    @Inject("dao2")
    protected Dao dao2;
    
    @Inject
    private ProjectInfo projectInfo;
    
    /**
     * 根据查询条件，分页查询用户数据
     * @param pager
     * @return 
     */
    public List<EFDevice> queryWithPager(HYPager<DeviceQueryForm> pager) {
        DeviceQueryForm queryForm = pager.getQueryForm();
        
        int totalCount = pager.getTotalCount();
        if (totalCount < 0) {
            Cnd cnd = makeCondition(queryForm);
            //totalCount = dao2.func("T_USER", "count", "1", cnd);
            totalCount = dao2.count(EFDevice.class, cnd);
            pager.setTotalCount(totalCount);
        }
        
        if (totalCount <= 0) {
            return null;
        }
        
        Cnd cnd = makeCondition(queryForm);
        if (cnd != null) {
            //cnd.orderBy("cityid", "asc");
            cnd.orderBy("num", "asc");
        } else {
            cnd = Cnd.NEW();
            cnd.orderBy("num", "asc");
        }
        
        return dao2.query(EFDevice.class, cnd, pager);
    }
    
    
    private Cnd makeCondition(DeviceQueryForm queryForm) {
        if (queryForm == null) return null;
        
        Cnd cnd = null;
        String cityid = queryForm.getCityid();
        if (StringUtils.isNotBlank(cityid) && !"0".equals(cityid)) {
            cnd = Cnd.where("cityid", "=", cityid);
        }
        
        return cnd;
    }
    
    /**
     * 获得所有的设备
     * @return 
     */
    public List<EFDevice> allDevices() {
        String sql="select Num, DeviceName from efdevice where latitude is not null and longitude is not null order by Num" ;
        Sql sqls = Sqls.create(sql);
        sqls.setCallback(new SqlCallback() {
            @Override
            public Object invoke(Connection conn, ResultSet rs, Sql sql) throws SQLException {
                List<EFDevice> allDevices = new ArrayList<EFDevice>();
                
                while (rs.next()) {
                    EFDevice device = new EFDevice();
                    device.setNum(rs.getString("Num"));
                    device.setDeviceName(rs.getString("DeviceName"));
                    allDevices.add(device);
                }
                
                return allDevices;
            }
        });

        List<EFDevice> list = dao2.execute(sqls).getObject(List.class);
        return list;
    }
    
    /**
     * 获得所有的设备
     * @return 
     */
    public List<EFDevice> allDeviceDetails() {
        String sql="select Num, DeviceName, latitude, longitude, elevation, manufaceture, installtime, lastinspect, lastrepair, cityid, " 
                + "status, laststatustime, lastalarmtime, efvalue, alarmlevel " 
                + " from efdevice where latitude is not null and longitude is not null order by Num" ;
        Sql sqls = Sqls.create(sql);
        sqls.setCallback(new SqlCallback() {
            @Override
            public Object invoke(Connection conn, ResultSet rs, Sql sql) throws SQLException {
                List<EFDevice> allDevices = new ArrayList<EFDevice>();
                
                while (rs.next()) {
                    EFDevice device = new EFDevice();
                    device.setNum(rs.getString("Num"));
                    device.setDeviceName(rs.getString("DeviceName"));
                    device.setLatitude(rs.getDouble("latitude"));
                    device.setLongitude(rs.getDouble("longitude"));
                    device.setElevation(rs.getDouble("elevation"));
                    device.setManufaceture(rs.getString("manufaceture"));
                    //Timestamp t = rs.getTimestamp("installtime");
                    device.setInstallTime(rs.getDate("installtime"));
                    device.setLastInSpect(rs.getDate("lastinspect"));
                    device.setLastRepair(rs.getDate("lastrepair"));
                    device.setCityid(rs.getString("cityid"));
                    
                    device.setStatus(rs.getString("status"));
                    device.setLaststatustime(rs.getTimestamp("laststatustime"));
                    device.setLastalarmtime(rs.getTimestamp("lastalarmtime"));
                    device.setEfvalue(rs.getString("efvalue"));
                    device.setAlarmlevel(rs.getInt("alarmlevel"));
                    
                    allDevices.add(device);
                }
                
                return allDevices;
            }
        });

        List<EFDevice> list = dao2.execute(sqls).getObject(List.class);
        return list;
    }

    /**
     * 添加User对象到数据库
     * @param device 
     */
    public void addDevice(EFDevice device) {
        dao2.insert(device);
    }
    
    /**
     * 批量添加设备
     * @param devices 
     */
    public void batchAdd(List<EFDevice> devices) {
        if (devices == null || devices.isEmpty()) {
            return;
        }
        for (EFDevice device : devices) {
            dao2.insert(device);
        }
    }
    
    /**
     * 判断
     * @param device
     * @return 
     */
    public boolean exist(EFDevice device) {
        EFDevice obj = dao2.fetch(device);
        return obj != null;
    }
    
    /**
     * 根据传入deviceNum，获得EFDevice对象。
     * @param deviceNum
     * @return 
     */
    public EFDevice getDevice(String deviceNum) {
        if (StringUtils.isBlank(deviceNum)) {
            return null;
        }
        
        EFDevice dbDevice = dao2.fetch(EFDevice.class, deviceNum);
        return dbDevice;
    }
    
    /**
     * 添加EFDevice对象到数据库
     * @param device 
     * @return  
     */
    public boolean updateDevice(EFDevice device) {
        EFDevice dbDevice = getDevice(device.getNum());
        if (dbDevice == null) {
            return false;
        }
        
        dbDevice.setDeviceName(device.getDeviceName());
        dbDevice.setLatitude(device.getLatitude());
        dbDevice.setLongitude(device.getLongitude());
        dbDevice.setElevation(device.getElevation());
        dbDevice.setManufaceture(device.getManufaceture());
        dbDevice.setInstallTime(device.getInstallTime());
        dbDevice.setLastInSpect(device.getLastInSpect());
        dbDevice.setLastRepair(device.getLastRepair());
        dbDevice.setCityid(device.getCityid());
        dao2.update(dbDevice);
        return true;
    }
    
    public List<EFDevice> parseExcel(File deviceExcelFile, Errors errors) {
        List<EFDevice> efDevices = new ArrayList<EFDevice>();
        
        List<ProjectInfo.XCity> allCities = projectInfo.cities();
        
        NPOIFSFileSystem fs = null;
        try {
            //fs = new NPOIFSFileSystem(new File("file.xls"));
            //HSSFWorkbook wb = new HSSFWorkbook(fs);
            
            HSSFWorkbook wb = new HSSFWorkbook(new FileInputStream(deviceExcelFile));

            HSSFSheet sheet = wb.getSheetAt(0);
            int lastRowNum = sheet.getLastRowNum();
            
            if (lastRowNum > 1000) {
                throw new Exception("设备文件的行数最多1000行，请检查您的设备文件。");
            }

            int rowIndex = 0;
            for (Row row : sheet) {
                if (rowIndex == 0) { // 第一行为标题行，不做处理
                    rowIndex++;
                    continue;
                }

                EFDevice efDevice = processOneRow(row, rowIndex, errors, allCities);
                if (efDevice != null) {
                    efDevices.add(efDevice);
                }

                rowIndex++;
            }
            
            if (efDevices.isEmpty()) {
                addRowError("上传的excel文件内容为空，不能得到设备信息内容，请检查您上传的文件内容是否正确。", errors);
            }
        } catch(Exception e) {
            LOG.error("解析设备上传文件出错。", e);
            addRowError("解析设备上传文件出错。" + e.getMessage(), errors);
        } finally {
            if (fs != null) {
                try {
                    fs.close();
                } catch (IOException ex) {
                }
            }
        }
        
        for (EFDevice d : efDevices) {
            boolean exist = exist(d);
            if (exist) {
                addRowError("站号：" + d.getNum() + " 已经存在了，站号不能重复。请检查文件内容确认是否正确。", errors);
            }
        }
        
        return efDevices;
    }
    
    private EFDevice processOneRow(Row row, int rowIndex, Errors errors, 
            List<ProjectInfo.XCity> allCities) {
        String num, deviceName, latitude, longitude, elevation,
                manufaceture, installTime, lastInSpect, lastRepair, cityName;
    
        int minCellCount = 10;
        
        DataFormatter formatter = new DataFormatter();
        int cellCount = row.getLastCellNum() - row.getFirstCellNum();
        if (cellCount < minCellCount) {
            addRowError("第"+ rowIndex + "行错误：单元格数量不对，应该为"+minCellCount+"列，请检查该行数据是否完整。", errors);
            return null;
        }
        
        int cellIndex = 0;
        String[] cellValues = new String[minCellCount];
        for (Cell cell : row) {
            CellReference cellRef = new CellReference(row.getRowNum(), cell.getColumnIndex());
            String text = formatter.formatCellValue(cell);
            cellValues[cellIndex++] = text;
        }
        
        num = cellValues[0];
        deviceName = cellValues[1];
        latitude = cellValues[2];
        longitude = cellValues[3];
        elevation = cellValues[4];
        manufaceture = cellValues[5];
        installTime = cellValues[6];
        lastInSpect = cellValues[7];
        lastRepair = cellValues[8];
        cityName = cellValues[9];
        
        Device device = new Device();
        device.setNum(num);
        device.setDeviceName(deviceName);
        device.setLatitude(latitude);
        device.setLongitude(longitude);
        device.setElevation(elevation);
        device.setManufaceture(manufaceture);
        device.setInstallTime(installTime);
        device.setLastInSpect(lastInSpect);
        device.setLastRepair(lastRepair);
        device.setCityid(getCityidByCityName(cityName, allCities));
        
        Errors cellErrors = new Errors();
        Device.validate(cellErrors, device);
        if (!cellErrors.isEmpty()) {
            String errorMsg = "第"+ rowIndex + "行错误：";
            for (Object cellError : cellErrors.values()) {
                errorMsg += cellError;
            }
            addRowError(errorMsg, errors);
            return null;
        }
        
        EFDevice efDevice = Device.toEFDevice(device);
        return efDevice;
    }
    
    private void addRowError(String errorMsg, Errors errors) {
        List<String> rowErrors = (List<String>)errors.get("rowsError");
        if (rowErrors == null) {
            rowErrors = new ArrayList<String>();
            errors.put("rowsError", rowErrors);
        }
        rowErrors.add(errorMsg);
    }
    
    private String getCityidByCityName(String cityName, List<ProjectInfo.XCity> allCities) {
        if (allCities == null || allCities.isEmpty() || StringUtils.isBlank(cityName)) {
            return null;
        }
        
        for (ProjectInfo.XCity xcity : allCities) {
            if (xcity.getName().contains(cityName.trim())) {
                return xcity.getCityid();
            }
        }
        return null;
    }

}
